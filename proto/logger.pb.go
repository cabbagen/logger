// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/logger.proto

package logger

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LoggerRequest struct {
	Appid                *string  `protobuf:"bytes,1,req,name=appid" json:"appid,omitempty"`
	Message              *string  `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
	Category             *string  `protobuf:"bytes,3,opt,name=category" json:"category,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoggerRequest) Reset()         { *m = LoggerRequest{} }
func (m *LoggerRequest) String() string { return proto.CompactTextString(m) }
func (*LoggerRequest) ProtoMessage()    {}
func (*LoggerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f826a5d771a4a228, []int{0}
}

func (m *LoggerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoggerRequest.Unmarshal(m, b)
}
func (m *LoggerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoggerRequest.Marshal(b, m, deterministic)
}
func (m *LoggerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoggerRequest.Merge(m, src)
}
func (m *LoggerRequest) XXX_Size() int {
	return xxx_messageInfo_LoggerRequest.Size(m)
}
func (m *LoggerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoggerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoggerRequest proto.InternalMessageInfo

func (m *LoggerRequest) GetAppid() string {
	if m != nil && m.Appid != nil {
		return *m.Appid
	}
	return ""
}

func (m *LoggerRequest) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *LoggerRequest) GetCategory() string {
	if m != nil && m.Category != nil {
		return *m.Category
	}
	return ""
}

type LoggerReply struct {
	Code                 *string  `protobuf:"bytes,1,req,name=code" json:"code,omitempty"`
	Message              *string  `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoggerReply) Reset()         { *m = LoggerReply{} }
func (m *LoggerReply) String() string { return proto.CompactTextString(m) }
func (*LoggerReply) ProtoMessage()    {}
func (*LoggerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f826a5d771a4a228, []int{1}
}

func (m *LoggerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoggerReply.Unmarshal(m, b)
}
func (m *LoggerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoggerReply.Marshal(b, m, deterministic)
}
func (m *LoggerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoggerReply.Merge(m, src)
}
func (m *LoggerReply) XXX_Size() int {
	return xxx_messageInfo_LoggerReply.Size(m)
}
func (m *LoggerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LoggerReply.DiscardUnknown(m)
}

var xxx_messageInfo_LoggerReply proto.InternalMessageInfo

func (m *LoggerReply) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

func (m *LoggerReply) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*LoggerRequest)(nil), "logger.LoggerRequest")
	proto.RegisterType((*LoggerReply)(nil), "logger.LoggerReply")
}

func init() { proto.RegisterFile("proto/logger.proto", fileDescriptor_f826a5d771a4a228) }

var fileDescriptor_f826a5d771a4a228 = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0xcf, 0xc9, 0x4f, 0x4f, 0x4f, 0x2d, 0xd2, 0x03, 0x73, 0x84, 0xd8, 0x20, 0x3c, 0x25,
	0x47, 0x2e, 0x5e, 0x1f, 0x30, 0x2b, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x88, 0x97, 0x8b,
	0x35, 0xb1, 0xa0, 0x20, 0x33, 0x45, 0x82, 0x51, 0x81, 0x49, 0x83, 0x53, 0x88, 0x9f, 0x8b, 0x3d,
	0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x55, 0x82, 0x09, 0x2c, 0x20, 0xc0, 0xc5, 0x91, 0x9c, 0x58,
	0x92, 0x9a, 0x9e, 0x5f, 0x54, 0x29, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0xa9, 0xa4, 0xc3, 0xc5, 0x0d,
	0x33, 0xa2, 0x20, 0xa7, 0x52, 0x88, 0x87, 0x8b, 0x25, 0x39, 0x3f, 0x25, 0x15, 0x9b, 0x7e, 0x46,
	0x0d, 0x4e, 0xa3, 0xc5, 0x4c, 0x30, 0x1b, 0x83, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x4c,
	0xb8, 0xd8, 0x1c, 0x73, 0x72, 0x7c, 0xf2, 0xd3, 0x85, 0x44, 0xf5, 0xa0, 0x6e, 0x44, 0x71, 0x92,
	0x94, 0x30, 0xba, 0x30, 0xc8, 0x1a, 0x53, 0x2e, 0x76, 0xcf, 0xbc, 0xb4, 0x7c, 0x32, 0xb4, 0x85,
	0x27, 0x16, 0xe5, 0x91, 0xaa, 0xcd, 0x8c, 0x8b, 0xc3, 0x25, 0x35, 0xa9, 0x34, 0x9d, 0x0c, 0x7d,
	0xae, 0x45, 0x45, 0xf9, 0x45, 0x24, 0xea, 0x73, 0xd2, 0xe0, 0x12, 0xcf, 0xcc, 0xd7, 0x4b, 0x2f,
	0x2a, 0x48, 0xd6, 0x4b, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0x2d, 0x86, 0x2a, 0x73, 0x82, 0x06,
	0x76, 0x00, 0x28, 0x1a, 0x03, 0x18, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xcf, 0x22, 0x67,
	0xdd, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoggerServiceClient is the client API for LoggerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggerServiceClient interface {
	AllLog(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*LoggerReply, error)
	InfoLog(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*LoggerReply, error)
	WarnLog(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*LoggerReply, error)
	DebugLog(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*LoggerReply, error)
	ErrorLog(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*LoggerReply, error)
}

type loggerServiceClient struct {
	cc *grpc.ClientConn
}

func NewLoggerServiceClient(cc *grpc.ClientConn) LoggerServiceClient {
	return &loggerServiceClient{cc}
}

func (c *loggerServiceClient) AllLog(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*LoggerReply, error) {
	out := new(LoggerReply)
	err := c.cc.Invoke(ctx, "/logger.LoggerService/AllLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerServiceClient) InfoLog(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*LoggerReply, error) {
	out := new(LoggerReply)
	err := c.cc.Invoke(ctx, "/logger.LoggerService/InfoLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerServiceClient) WarnLog(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*LoggerReply, error) {
	out := new(LoggerReply)
	err := c.cc.Invoke(ctx, "/logger.LoggerService/WarnLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerServiceClient) DebugLog(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*LoggerReply, error) {
	out := new(LoggerReply)
	err := c.cc.Invoke(ctx, "/logger.LoggerService/DebugLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggerServiceClient) ErrorLog(ctx context.Context, in *LoggerRequest, opts ...grpc.CallOption) (*LoggerReply, error) {
	out := new(LoggerReply)
	err := c.cc.Invoke(ctx, "/logger.LoggerService/ErrorLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggerServiceServer is the server API for LoggerService service.
type LoggerServiceServer interface {
	AllLog(context.Context, *LoggerRequest) (*LoggerReply, error)
	InfoLog(context.Context, *LoggerRequest) (*LoggerReply, error)
	WarnLog(context.Context, *LoggerRequest) (*LoggerReply, error)
	DebugLog(context.Context, *LoggerRequest) (*LoggerReply, error)
	ErrorLog(context.Context, *LoggerRequest) (*LoggerReply, error)
}

func RegisterLoggerServiceServer(s *grpc.Server, srv LoggerServiceServer) {
	s.RegisterService(&_LoggerService_serviceDesc, srv)
}

func _LoggerService_AllLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServiceServer).AllLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.LoggerService/AllLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServiceServer).AllLog(ctx, req.(*LoggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggerService_InfoLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServiceServer).InfoLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.LoggerService/InfoLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServiceServer).InfoLog(ctx, req.(*LoggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggerService_WarnLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServiceServer).WarnLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.LoggerService/WarnLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServiceServer).WarnLog(ctx, req.(*LoggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggerService_DebugLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServiceServer).DebugLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.LoggerService/DebugLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServiceServer).DebugLog(ctx, req.(*LoggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggerService_ErrorLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggerServiceServer).ErrorLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logger.LoggerService/ErrorLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggerServiceServer).ErrorLog(ctx, req.(*LoggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoggerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logger.LoggerService",
	HandlerType: (*LoggerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllLog",
			Handler:    _LoggerService_AllLog_Handler,
		},
		{
			MethodName: "InfoLog",
			Handler:    _LoggerService_InfoLog_Handler,
		},
		{
			MethodName: "WarnLog",
			Handler:    _LoggerService_WarnLog_Handler,
		},
		{
			MethodName: "DebugLog",
			Handler:    _LoggerService_DebugLog_Handler,
		},
		{
			MethodName: "ErrorLog",
			Handler:    _LoggerService_ErrorLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/logger.proto",
}
